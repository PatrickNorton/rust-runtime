#[derive(Copy, Clone, FromPrimitive, Hash, PartialEq, Eq, Debug)]
pub enum Operator {
    Add,
    RAdd,
    Subtract,
    RSubtract,
    USubtract,
    Multiply,
    RMultiply,
    Divide,
    RDivide,
    FloorDiv,
    RFloorDiv,
    Power,
    RPower,
    Equals,
    REquals,
    NotEquals,
    RNotEquals,
    GreaterThan,
    RGreaterThan,
    LessThan,
    RLessThan,
    GreaterEqual,
    RGreaterEqual,
    LessEqual,
    RLessEqual,
    LeftBitshift,
    RLeftBitshift,
    RightBitshift,
    RRightBitshift,
    BitwiseAnd,
    RBitwiseAnd,
    BitwiseOr,
    RBitwiseOr,
    BitwiseXor,
    RBitwiseXor,
    BitwiseNot,
    Modulo,
    RModulo,
    GetAttr,
    GetSlice,
    SetAttr,
    SetSlice,
    Call,
    Compare,
    RCompare,
    Iter,
    IterSlice,
    New,
    In,
    Missing,
    Del,
    DelAttr,
    DelSlice,
    Str,
    Repr,
    Bool,
    Int,
    Reversed,
    Hash,
    Enter,
    Exit,
}

impl Operator {
    pub fn name(self) -> &'static str {
        match self {
            Operator::Add => "operator +",
            Operator::RAdd => "operator r+",
            Operator::Subtract => "operator -",
            Operator::RSubtract => "operator r-",
            Operator::USubtract => "operator u-",
            Operator::Multiply => "operator *",
            Operator::RMultiply => "operator r*",
            Operator::Divide => "operator /",
            Operator::RDivide => "operator r/",
            Operator::FloorDiv => "operator //",
            Operator::RFloorDiv => "operator r//",
            Operator::Power => "operator **",
            Operator::RPower => "operator r**",
            Operator::Equals => "operator ==",
            Operator::REquals => "operator r==",
            Operator::NotEquals => "operator !=",
            Operator::RNotEquals => "operator r!=",
            Operator::GreaterThan => "operator >",
            Operator::RGreaterThan => "operator r>",
            Operator::LessThan => "operator <",
            Operator::RLessThan => "operator r<",
            Operator::GreaterEqual => "operator >=",
            Operator::RGreaterEqual => "operator r>=",
            Operator::LessEqual => "operator <=",
            Operator::RLessEqual => "operator r<=",
            Operator::LeftBitshift => "operator <<",
            Operator::RLeftBitshift => "operator r<<",
            Operator::RightBitshift => "operator >>",
            Operator::RRightBitshift => "operator r>>",
            Operator::BitwiseAnd => "operator &",
            Operator::RBitwiseAnd => "operator r&",
            Operator::BitwiseOr => "operator |",
            Operator::RBitwiseOr => "operator r|",
            Operator::BitwiseXor => "operator ^",
            Operator::RBitwiseXor => "operator r^",
            Operator::BitwiseNot => "operator ~",
            Operator::Modulo => "operator %",
            Operator::RModulo => "operator r%",
            Operator::GetAttr => "operator []",
            Operator::GetSlice => "operator [:]",
            Operator::SetAttr => "operator []=",
            Operator::SetSlice => "operator [:]=",
            Operator::Call => "operator ()",
            Operator::Compare => "operator <=>",
            Operator::RCompare => "operator r<=>",
            Operator::Iter => "operator iter",
            Operator::IterSlice => "operator iter[:]",
            Operator::New => "operator new",
            Operator::In => "operator in",
            Operator::Missing => "operator missing",
            Operator::Del => "operator del",
            Operator::DelAttr => "operator del[]",
            Operator::DelSlice => "operator del[:]",
            Operator::Str => "operator str",
            Operator::Repr => "operator repr",
            Operator::Bool => "operator bool",
            Operator::Int => "operator int",
            Operator::Reversed => "operator reversed",
            Operator::Hash => "operator hash",
            Operator::Enter => "operator enter",
            Operator::Exit => "operator exit",
        }
    }
}
